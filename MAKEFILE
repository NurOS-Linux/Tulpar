# Makefile for Tulpar Package Manager
# Author: AnmiTaliDev
# Date: 2024-12-23 20:24:47 UTC

# Compiler settings
CXX = g++
CC = gcc
CXXFLAGS = -Wall -Wextra -O2 -std=c++17 -fPIC
CFLAGS = -Wall -Wextra -O2 -fPIC
LDFLAGS = -shared

# Package version
VERSION = 1.0.0

# Install paths
PREFIX = /usr
SYSCONFDIR = /etc
LOCALSTATEDIR = /var

# Directories
BINDIR = $(PREFIX)/bin
LIBDIR = $(PREFIX)/lib
INCLUDEDIR = $(PREFIX)/include
CONFDIR = $(SYSCONFDIR)/tulpar
CACHEDIR = $(LOCALSTATEDIR)/cache/tulpar
DBDIR = $(LOCALSTATEDIR)/lib/tulpar
LOGDIR = $(LOCALSTATEDIR)/log/tulpar

# Dependencies
DEPS = sqlite3 libcurl openssl systemd libarchive
PKG_CONFIG = pkg-config
CXXFLAGS += $(shell $(PKG_CONFIG) --cflags $(DEPS))
CFLAGS += $(shell $(PKG_CONFIG) --cflags $(DEPS))
LIBS = $(shell $(PKG_CONFIG) --libs $(DEPS))

# Source files
SRCS_CXX = src/tulpar.cpp src/config.cpp
SRCS_C = src/cli.c src/tulpard.c
HEADERS = include/tulpar.hpp include/config.hpp

# Object files
OBJS_CXX = $(SRCS_CXX:.cpp=.o)
OBJS_C = $(SRCS_C:.c=.o)

# Targets
LIB = libtulpar.so.$(VERSION)
CLI = tulpar
DAEMON = tulpard

.PHONY: all clean install uninstall

all: $(LIB) $(CLI) $(DAEMON)

# Library
$(LIB): $(OBJS_CXX)
    $(CXX) $(LDFLAGS) -o $@ $^ $(LIBS)
    ln -sf $(LIB) libtulpar.so

# CLI tool
$(CLI): src/cli.o $(LIB)
    $(CC) -o $@ $^ -L. -ltulpar $(LIBS)

# Daemon
$(DAEMON): src/tulpard.o $(LIB)
    $(CC) -o $@ $^ -L. -ltulpar $(LIBS)

# C++ compilation
%.o: %.cpp $(HEADERS)
    $(CXX) $(CXXFLAGS) -I./include -c -o $@ $<

# C compilation
%.o: %.c $(HEADERS)
    $(CC) $(CFLAGS) -I./include -c -o $@ $<

# Installation
install: all
    # Binaries
    install -d $(DESTDIR)$(BINDIR)
    install -m 755 $(CLI) $(DESTDIR)$(BINDIR)
    install -m 755 $(DAEMON) $(DESTDIR)$(BINDIR)

    # Library
    install -d $(DESTDIR)$(LIBDIR)
    install -m 755 $(LIB) $(DESTDIR)$(LIBDIR)
    ln -sf $(LIB) $(DESTDIR)$(LIBDIR)/libtulpar.so

    # Headers
    install -d $(DESTDIR)$(INCLUDEDIR)/tulpar
    install -m 644 $(HEADERS) $(DESTDIR)$(INCLUDEDIR)/tulpar

    # Config
    install -d $(DESTDIR)$(CONFDIR)
    install -m 644 config/tulpar.conf $(DESTDIR)$(CONFDIR)

    # systemd service
    install -d $(DESTDIR)$(SYSCONFDIR)/systemd/system
    install -m 644 systemd/tulpar.service $(DESTDIR)$(SYSCONFDIR)/systemd/system

    # Directories
    install -d $(DESTDIR)$(CACHEDIR)
    install -d $(DESTDIR)$(DBDIR)
    install -d $(DESTDIR)$(LOGDIR)

    # Update ldconfig
    -ldconfig

# Uninstallation
uninstall:
    # Remove binaries
    rm -f $(DESTDIR)$(BINDIR)/$(CLI)
    rm -f $(DESTDIR)$(BINDIR)/$(DAEMON)

    # Remove library
    rm -f $(DESTDIR)$(LIBDIR)/$(LIB)
    rm -f $(DESTDIR)$(LIBDIR)/libtulpar.so

    # Remove headers
    rm -rf $(DESTDIR)$(INCLUDEDIR)/tulpar

    # Remove config
    rm -rf $(DESTDIR)$(CONFDIR)

    # Remove service
    rm -f $(DESTDIR)$(SYSCONFDIR)/systemd/system/tulpar.service

    # Update ldconfig
    -ldconfig

# Cleaning
clean:
    rm -f src/*.o
    rm -f $(LIB) libtulpar.so
    rm -f $(CLI) $(DAEMON)

# Tests
.PHONY: test
test:
    $(MAKE) -C tests

# Documentation
.PHONY: doc
doc:
    doxygen Doxyfile

# Package
.PHONY: package
package:
    tar -czf tulpar-$(VERSION).tar.gz \
        src/ include/ config/ systemd/ \
        Makefile README.md LICENSE

# Dependencies check
.PHONY: check-deps
check-deps:
    @echo "Checking dependencies..."
    @for dep in $(DEPS); do \
        if $(PKG_CONFIG) --exists $$dep; then \
            echo "Found $$dep"; \
        else \
            echo "Missing $$dep"; \
            exit 1; \
        fi \
    done

# Debug build
.PHONY: debug
debug: CXXFLAGS += -g -DDEBUG
debug: CFLAGS += -g -DDEBUG
debug: all

# Help
.PHONY: help
help:
    @echo "Tulpar Package Manager $(VERSION)"
    @echo
    @echo "Targets:"
    @echo "  all        - Build everything (default)"
    @echo "  install    - Install to system"
    @echo "  uninstall  - Remove from system"
    @echo "  clean      - Remove build files"
    @echo "  test       - Run tests"
    @echo "  doc        - Generate documentation"
    @echo "  package    - Create source package"
    @echo "  debug      - Build with debug symbols"
    @echo "  help       - Show this help"