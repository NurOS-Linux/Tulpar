#!/usr/bin/env python3

from os import getuid
if getuid()!=0:
    print('⚠ You must run Tulpar as root user.')
    exit(1)
from os import path,replace,chdir,remove,listdir,system
from tarfile import open as taropen
from argparse import ArgumentParser
from platform import machine
CURRENT_ARCH=machine()
from json import load,loads
from http import HTTPStatus
from semver import compare
from random import randint
from colorama import Fore
from shutil import rmtree
from requests import get
from hashlib import md5

ARGPARSE=ArgumentParser(description="he package manager Tulpar for NurOS (CLI)")
SUB=ARGPARSE.add_subparsers(dest='command')
SUB.add_parser('install',help='Install the public package').add_argument('PACKAGE',help="Name or path of the package to install")
SUB.add_parser('remove',help='Remove the installed package').add_argument('PACKAGE',help="Name of the package to remove")
SUB.add_parser('info',help='Display information about package').add_argument('PACKAGE',help='Name of the package to describe')
SUB.add_parser('list',help='Lists all installed packages')
REPO=SUB.add_parser('repo')
REPO.add_argument('-a',help='Adds repository to list')
REPO.add_argument('-r',help='Remove repository from list')
ARGS=ARGPARSE.parse_args()

if len(ARGS.__dict__)==1 and ARGS.command==None:
    print(Fore.YELLOW+' ? No argument is provided, type --help.')
    exit(1)

def ask():
    try:
        while True:
            answer=input(f'{Fore.WHITE}[{Fore.GREEN}y{Fore.WHITE}/{Fore.RED}n{Fore.WHITE}]{Fore.RESET}: ').lower()
            if answer=='y':return True
            elif answer=='n':return False
    except:exit(0)

class ProceedInstall:
    def __init__(self,file_path:str):
        self.packages_to_install=[]
        if file_path.endswith('.apg'):
            if not path.exists(file_path):
                print(' - This file path not found.')
                self.cancel(1)
            self.file_path=self.unpack(self.file_path)
        else:
            with open('/etc/tulpar/repolist','rt')as repolist:
                self.repositories=[i.strip()for i in repolist.readlines()]
                repolist.close()
            self.packages_to_install[0]=self.download(self.get_info(file_path))
    def cancel(self,exit_code):
        ...
        print('--- Canceled operation.')
        exit(exit_code)
    def get_info(self,package):
        print(Fore.CYAN+f' * Retrieving information about {package}...')
        for repo in self.repositories:
            try:
                with get(path.join(repo,'packages',package,'info'),timeout=1.0)as request:
                    if request.status_code!=200:raise request.status_code
                    else:
                        package_info=loads(request.text)
                        if not CURRENT_ARCH in package_info['architectures']:
                            print(' - This package is not supports machine`s architecture!')
                            exit(1)
                        package_info['name']=package
                        package_info['from-repo']=repo
                        package_info['extracted-path']=None
                        return package_info
            except Exception as e:print(f' - Failed to retrieve information about {package}: {e}')
            finally:continue
        exit(1)
    def unpack(self,package):
        print(f' * Unpacking {path.basename(package)}...')
        try:
            with taropen(package,'r:xz')as __file:
                package=path.join(f'/var/spool/tulpar',{randint(1,9999999999)})
                __file.extractall(package)
                __file.close()
                return package
        except Exception as e:
            print(Fore.RED+f' - Failed to unpack package: {e}')
            exit(1)
    def download(self,package_info):
        try:
            with get(path.join(package_info['from-repo'],'packages',package_info['name']+f'?arch={CURRENT_ARCH}&version={package_info["latest-version"]}'))as request:
                if request.status_code!=200:raise request.status_code
                else:
                    package_path=path.join('/var/cache/tulpar',f'{randint(1,9999999999)}.apg')
                    with open(package_path,'wb')as _:
                        _.write(request.content)
                        _.close()
                    package_info['extracted-path']=package_info
                    return package_info
        except Exception as e:print(f' - Failed to download {package_info['name']}: {e}')
    def __checksum_check_dir(self,file):
        if not path.exists('md5sums'):
            print(" - Checksum file is not found in package.")
            self.cancel(1)
        else:
            with open('md5sums') as __md5sumsfile:
                checksums=__md5sumsfile.readlines()
                __md5sumsfile.close()
        for line in checksums:
            line=line.strip().split()
            if len(line)==2:
                file,expected_checksum=line
                if file.startswith('usr/local') or file.startswith('/usr/local'):
                    print('/!\\ Installing to /usr/local/ folders are not allowed!')
                    self.cancel()
                file_path=path.join(self.data_path,file)
                if path.exists(file_path):
                    with open(file_path,'rb') as file_content:
                        file_data = file_content.read()
                        actual_checksum=md5(file_data).hexdigest()
                        if actual_checksum != expected_checksum:
                            print(f" - Checksum mismatch for {file}")
                            self.cancel(1)
                        else:
                            #print(f' + {file} == {actual_checksum}')
                            ...
                else:
                    print(f" - Missing file: {file}")
                    self.cancel(1)
    def checksum(self):
        ...
    def __inst_dir(self,dir:str):
        for file in listdir(dir):
            file=path.join(dir,file)
            if path.isdir(file):self.__inst_dir(file)
            else:replace(file,file.replace(dir,'/'))
    def install(self):
        print(', '.join(self.packages_to_install))
        print(' ? Do you want to install these packages?')
        if ask():
            for package in self.packages_to_install:
                system(path.join('/var/lib/tulpar/packages',package,'scripts/preinstall'))
                self.__inst_dir(self.data_path)
                rmtree(self.data_path)
                system(path.join('/var/lib/tulpar/packages',package,'scripts/postinstall'))
            print(f'-+- Successfully installed "{self.metadata["name"]}"')
        else:self.cancel(0)

class ProceedRemove:
    def __init__(self,name:str):
        self.file_path=path.join('/var/lib/tulpar/packages',name)
        if not path.exists(self.file_path):
            print(f' - This package is not found.')
            exit(1)
        else:
            self.metadata=load(open(path.join(self.file_path,'metadata.json')))
            self.packages_to_remove={self.metadata['name']:[self.file_path]}
            self.get_packages()
            print(' & This operation will remove these packages:')
            print(', '.join([i[0] for i in self.packages_to_remove.items()]))
            print(' ? Do you want to continue?')
            if ask():
                for package in self.packages_to_remove.items():
                    print(' & Removing '+package[0])
                    system(path.join('/var/lib/tulpar/packages',package[0],'scripts/preremove'))
                    for file in package[1]:
                        if path.isdir(file):rmtree(file)
                        else:remove(file)
                        print(' * Removed '+file)
                    system(path.join('/var/lib/tulpar/packages',package[0],'scripts/postremove'))
                print(f'-+- Successfully removed "{self.metadata["name"]}"')
            else:exit(0)
    def get_files(self,package_path,package:list):
        with open(path.join(package_path,'md5sums'))as __files:
            files=__files.readlines()
            for file in files:
                file=file.split()[0]
                if not file.startswith('/'):file=path.join('/',file)
                package.append(file)
            __files.close()
    def get_packages(self):
        self.get_files(self.file_path,self.packages_to_remove[self.metadata['name']])
        for dependency in self.metadata['dependencies']:
            if dependency['name']==self.metadata['name']:
                print('/!\\ Warning! Unexpected loop in dependencies list.')
                continue
            dependency_file_path=path.join('/var/lib/tulpar/packages',dependency['name'])
            if not path.exists(dependency_file_path):
                print(f'/!\\ Dependency "{dependency["name"]}" is installed manually or not found.')
                continue
        for other_package in listdir('/var/lib/tulpar/packages'):
            # Проверяем другие пакеты если они не относятся к операции
            if other_package in self.packages_to_remove:continue
            other_package_metadata=load(open(path.join('/var/lib/tulpar/packages',other_package,'metadata.json')))
            for other_package_dependency in other_package_metadata['dependencies']:
                if other_package_dependency in self.packages_to_remove:
                    if other_package_dependency==self.metadata['name']:
                        if not ask('/!\\ Warning! This package is required by other package, are you sure you want to delete it?'):exit(0)
                    del self.packages_to_remove[other_package_dependency]
        for dependency in self.packages_to_remove:
            self.packages_to_remove[dependency['name']].append(path.join('/var/lib/tulpar/packages',dependency['name']))
            self.get_files(dependency_file_path,self.packages_to_remove[dependency['name']])

class PackageInfo:
    def __init__(self,package_name):
        self.package_path=path.join('/var/lib/tulpar/packages',package_name)
        if not path.exists(self.package_path):
            print('/!\\ This package is not found')
            exit(1)
        else:
            with open(path.join(self.package_path,'metadata.json'))as self.metadata:self.metadata=load(self.metadata)
            print(f' & {self.metadata['name']} with version {self.metadata['version']} for {self.metadata['architecture']}\n   Made by {self.metadata['maintainer']} under license {self.metadata['license']}, {self.metadata['homepage']}\n   {self.metadata['description']}')

class ListPackages:
    def __init__(self):
        for package in listdir('/var/lib/tulpar/packages'):
            package=path.join('/var/lib/tulpar/packages',package)
            metadata=load(open(path.join(package,'metadata.json')))
            print(f' * {metadata["name"]}, {metadata["version"]}')

try:
    if ARGS.command is not None:
        if ARGS.command=='install':ProceedInstall(ARGS.PACKAGE)
        elif ARGS.command=='remove':ProceedRemove(ARGS.PACKAGE)
        elif ARGS.command=='info':PackageInfo(ARGS.PACKAGE)
        elif ARGS.command=='list':ListPackages()

except Exception as exception:
    print(f'/!\\ An error occurred while working with package manager: {exception}\nRaise an exception for developers?')
    if ask():raise exception
    else:exit(1)